// Generated from java-escape by ANTLR 4.11.1

    package cool.lexer;	

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class CoolLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ERROR=1, BLOCK_COMMENT=2, COMMENT_ERROR_UNMATCHED=3, LINE_COMMENT=4, EQ=5, 
		LT=6, LE=7, PLUS=8, MINUS=9, MULT=10, DIV=11, NEG=12, NOT=13, AT=14, SEMI=15, 
		COMMA=16, COLON=17, DOT=18, ASSIGN=19, RESULT=20, LPAREN=21, RPAREN=22, 
		LBRACE=23, RBRACE=24, CLASS=25, INHERITS=26, WHILE=27, LOOP=28, POOL=29, 
		CASE=30, ESAC=31, IF=32, THEN=33, ELSE=34, FI=35, LET=36, IN=37, NEW=38, 
		OF=39, ISVOID=40, BOOL=41, INT=42, ID=43, STRING=44, TYPE=45, WS=46, INVALID_CHARACTER=47;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"BLOCK_COMMENT", "COMMENT_ERROR_UNMATCHED", "LINE_COMMENT", "EQ", "LT", 
			"LE", "PLUS", "MINUS", "MULT", "DIV", "NEG", "NOT", "AT", "SEMI", "COMMA", 
			"COLON", "DOT", "ASSIGN", "RESULT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
			"CLASS", "INHERITS", "WHILE", "LOOP", "POOL", "CASE", "ESAC", "IF", "THEN", 
			"ELSE", "FI", "LET", "IN", "NEW", "OF", "ISVOID", "DIGIT", "UPPERCASE", 
			"LOWERCASE", "BOOL", "INT", "ID", "STRING", "TYPE", "WS", "INVALID_CHARACTER"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, "'*)'", null, "'='", "'<'", "'<='", "'+'", "'-'", "'*'", 
			"'/'", "'~'", "'not'", "'@'", "';'", "','", "':'", "'.'", "'<-'", "'=>'", 
			"'('", "')'", "'{'", "'}'", "'class'", "'inherits'", "'while'", "'loop'", 
			"'pool'", "'case'", "'esac'", "'if'", "'then'", "'else'", "'fi'", "'let'", 
			"'in'", "'new'", "'of'", "'isvoid'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ERROR", "BLOCK_COMMENT", "COMMENT_ERROR_UNMATCHED", "LINE_COMMENT", 
			"EQ", "LT", "LE", "PLUS", "MINUS", "MULT", "DIV", "NEG", "NOT", "AT", 
			"SEMI", "COMMA", "COLON", "DOT", "ASSIGN", "RESULT", "LPAREN", "RPAREN", 
			"LBRACE", "RBRACE", "CLASS", "INHERITS", "WHILE", "LOOP", "POOL", "CASE", 
			"ESAC", "IF", "THEN", "ELSE", "FI", "LET", "IN", "NEW", "OF", "ISVOID", 
			"BOOL", "INT", "ID", "STRING", "TYPE", "WS", "INVALID_CHARACTER"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	    
	    private void raiseError(String msg) {
	        setText(msg);
	        setType(ERROR);
	    }


	public CoolLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "CoolLexer.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 0:
			BLOCK_COMMENT_action((RuleContext)_localctx, actionIndex);
			break;
		case 1:
			COMMENT_ERROR_UNMATCHED_action((RuleContext)_localctx, actionIndex);
			break;
		case 45:
			STRING_action((RuleContext)_localctx, actionIndex);
			break;
		case 48:
			INVALID_CHARACTER_action((RuleContext)_localctx, actionIndex);
			break;
		}
	}
	private void BLOCK_COMMENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:
			 skip(); 
			break;
		case 1:
			 raiseError("EOF in comment"); 
			break;
		}
	}
	private void COMMENT_ERROR_UNMATCHED_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2:
			raiseError("Unmatched *)");
			break;
		}
	}
	private void STRING_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3:

			                String str = getText();
			                str = str.substring(1, str.length() - 1);

			                if (str.contains("\\n")) {
			                    str = str.replace("\\n", "\n");
			                } else if (str.contains("\\t")) {
			                    str = str.replace("\\t", "\t");
			                } else if (str.contains("\\b")) {
			                    str = str.replace("\\b", "\b");
			                } else if (str.contains("\\f")) {
			                    str = str.replace("\\f", "\f");
			                } else if (str.contains("\\\\")) {
			                    str = str.replace("\\\\", "\\");
			                } else if (str.contains("\\") && !str.contains("\\0")) {
			                    str = str.replace("\\", "");
			                }

			                if (str.length() > 1024) {
			                    raiseError("String constant too long");
			                } else if (str.contains("\0")) {
			                    raiseError("String contains null character");
			                } else {
			                    setText(str);
			                }
			            
			break;
		case 4:
			raiseError("Unterminated string constant");
			break;
		case 5:
			raiseError("EOF in string constant");
			break;
		}
	}
	private void INVALID_CHARACTER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 6:
			raiseError("Invalid character: " + getText());
			break;
		}
	}

	public static final String _serializedATN =
		"\u0004\u0000/\u0167\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
		"!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007"+
		"&\u0002\'\u0007\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007"+
		"+\u0002,\u0007,\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u0007"+
		"0\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0005\u0000"+
		"i\b\u0000\n\u0000\f\u0000l\t\u0000\u0001\u0000\u0001\u0000\u0001\u0000"+
		"\u0001\u0000\u0001\u0000\u0001\u0000\u0003\u0000t\b\u0000\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0002\u0005\u0002\u007f\b\u0002\n\u0002\f\u0002\u0082"+
		"\t\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001"+
		"\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\t\u0001"+
		"\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\f\u0001\f\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f"+
		"\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014"+
		"\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017"+
		"\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018"+
		"\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018"+
		"\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019"+
		"\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001 \u0001"+
		" \u0001 \u0001 \u0001 \u0001!\u0001!\u0001!\u0001\"\u0001\"\u0001\"\u0001"+
		"\"\u0001#\u0001#\u0001#\u0001$\u0001$\u0001$\u0001$\u0001%\u0001%\u0001"+
		"%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001\'\u0001\'\u0001"+
		"(\u0001(\u0001)\u0001)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0003*\u0112\b*\u0001+\u0004+\u0115\b+\u000b+\f+\u0116"+
		"\u0001,\u0001,\u0001,\u0001,\u0001,\u0005,\u011e\b,\n,\f,\u0121\t,\u0001"+
		"-\u0001-\u0001-\u0001-\u0001-\u0003-\u0128\b-\u0001-\u0001-\u0005-\u012c"+
		"\b-\n-\f-\u012f\t-\u0001-\u0001-\u0001-\u0003-\u0134\b-\u0001-\u0001-"+
		"\u0001-\u0001-\u0003-\u013a\b-\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0005.\u0157\b.\n.\f.\u015a\t.\u0003.\u015c\b.\u0001/\u0004/"+
		"\u015f\b/\u000b/\f/\u0160\u0001/\u0001/\u00010\u00010\u00010\u0003j\u0080"+
		"\u012d\u00001\u0001\u0002\u0003\u0003\u0005\u0004\u0007\u0005\t\u0006"+
		"\u000b\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e"+
		"\u001b\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016"+
		"+\u0017-\u0018/\u00191\u001a3\u001b5\u001c7\u001d9\u001e;\u001f= ?!A\""+
		"C#E$G%I&K\'M(O\u0000Q\u0000S\u0000U)W*Y+[,]-_.a/\u0001\u0000\u0004\u0001"+
		"\u000009\u0001\u0000AZ\u0001\u0000az\u0003\u0000\t\n\f\r  \u017d\u0000"+
		"\u0001\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000\u0000"+
		"\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000\u0000"+
		"\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000\r"+
		"\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011"+
		"\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015"+
		"\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019"+
		"\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000\u001d"+
		"\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000!\u0001"+
		"\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001\u0000\u0000"+
		"\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0000"+
		"\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000/"+
		"\u0001\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u00003\u0001\u0000"+
		"\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0000"+
		"\u00009\u0001\u0000\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000="+
		"\u0001\u0000\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000A\u0001\u0000"+
		"\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000E\u0001\u0000\u0000\u0000"+
		"\u0000G\u0001\u0000\u0000\u0000\u0000I\u0001\u0000\u0000\u0000\u0000K"+
		"\u0001\u0000\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000U\u0001\u0000"+
		"\u0000\u0000\u0000W\u0001\u0000\u0000\u0000\u0000Y\u0001\u0000\u0000\u0000"+
		"\u0000[\u0001\u0000\u0000\u0000\u0000]\u0001\u0000\u0000\u0000\u0000_"+
		"\u0001\u0000\u0000\u0000\u0000a\u0001\u0000\u0000\u0000\u0001c\u0001\u0000"+
		"\u0000\u0000\u0003u\u0001\u0000\u0000\u0000\u0005z\u0001\u0000\u0000\u0000"+
		"\u0007\u0087\u0001\u0000\u0000\u0000\t\u0089\u0001\u0000\u0000\u0000\u000b"+
		"\u008b\u0001\u0000\u0000\u0000\r\u008e\u0001\u0000\u0000\u0000\u000f\u0090"+
		"\u0001\u0000\u0000\u0000\u0011\u0092\u0001\u0000\u0000\u0000\u0013\u0094"+
		"\u0001\u0000\u0000\u0000\u0015\u0096\u0001\u0000\u0000\u0000\u0017\u0098"+
		"\u0001\u0000\u0000\u0000\u0019\u009c\u0001\u0000\u0000\u0000\u001b\u009e"+
		"\u0001\u0000\u0000\u0000\u001d\u00a0\u0001\u0000\u0000\u0000\u001f\u00a2"+
		"\u0001\u0000\u0000\u0000!\u00a4\u0001\u0000\u0000\u0000#\u00a6\u0001\u0000"+
		"\u0000\u0000%\u00a9\u0001\u0000\u0000\u0000\'\u00ac\u0001\u0000\u0000"+
		"\u0000)\u00ae\u0001\u0000\u0000\u0000+\u00b0\u0001\u0000\u0000\u0000-"+
		"\u00b2\u0001\u0000\u0000\u0000/\u00b4\u0001\u0000\u0000\u00001\u00ba\u0001"+
		"\u0000\u0000\u00003\u00c3\u0001\u0000\u0000\u00005\u00c9\u0001\u0000\u0000"+
		"\u00007\u00ce\u0001\u0000\u0000\u00009\u00d3\u0001\u0000\u0000\u0000;"+
		"\u00d8\u0001\u0000\u0000\u0000=\u00dd\u0001\u0000\u0000\u0000?\u00e0\u0001"+
		"\u0000\u0000\u0000A\u00e5\u0001\u0000\u0000\u0000C\u00ea\u0001\u0000\u0000"+
		"\u0000E\u00ed\u0001\u0000\u0000\u0000G\u00f1\u0001\u0000\u0000\u0000I"+
		"\u00f4\u0001\u0000\u0000\u0000K\u00f8\u0001\u0000\u0000\u0000M\u00fb\u0001"+
		"\u0000\u0000\u0000O\u0102\u0001\u0000\u0000\u0000Q\u0104\u0001\u0000\u0000"+
		"\u0000S\u0106\u0001\u0000\u0000\u0000U\u0111\u0001\u0000\u0000\u0000W"+
		"\u0114\u0001\u0000\u0000\u0000Y\u0118\u0001\u0000\u0000\u0000[\u0122\u0001"+
		"\u0000\u0000\u0000]\u015b\u0001\u0000\u0000\u0000_\u015e\u0001\u0000\u0000"+
		"\u0000a\u0164\u0001\u0000\u0000\u0000cd\u0005(\u0000\u0000de\u0005*\u0000"+
		"\u0000ej\u0001\u0000\u0000\u0000fi\u0003\u0001\u0000\u0000gi\t\u0000\u0000"+
		"\u0000hf\u0001\u0000\u0000\u0000hg\u0001\u0000\u0000\u0000il\u0001\u0000"+
		"\u0000\u0000jk\u0001\u0000\u0000\u0000jh\u0001\u0000\u0000\u0000ks\u0001"+
		"\u0000\u0000\u0000lj\u0001\u0000\u0000\u0000mn\u0005*\u0000\u0000no\u0005"+
		")\u0000\u0000op\u0001\u0000\u0000\u0000pt\u0006\u0000\u0000\u0000qr\u0005"+
		"\u0000\u0000\u0001rt\u0006\u0000\u0001\u0000sm\u0001\u0000\u0000\u0000"+
		"sq\u0001\u0000\u0000\u0000t\u0002\u0001\u0000\u0000\u0000uv\u0005*\u0000"+
		"\u0000vw\u0005)\u0000\u0000wx\u0001\u0000\u0000\u0000xy\u0006\u0001\u0002"+
		"\u0000y\u0004\u0001\u0000\u0000\u0000z{\u0005-\u0000\u0000{|\u0005-\u0000"+
		"\u0000|\u0080\u0001\u0000\u0000\u0000}\u007f\t\u0000\u0000\u0000~}\u0001"+
		"\u0000\u0000\u0000\u007f\u0082\u0001\u0000\u0000\u0000\u0080\u0081\u0001"+
		"\u0000\u0000\u0000\u0080~\u0001\u0000\u0000\u0000\u0081\u0083\u0001\u0000"+
		"\u0000\u0000\u0082\u0080\u0001\u0000\u0000\u0000\u0083\u0084\u0005\n\u0000"+
		"\u0000\u0084\u0085\u0001\u0000\u0000\u0000\u0085\u0086\u0006\u0002\u0003"+
		"\u0000\u0086\u0006\u0001\u0000\u0000\u0000\u0087\u0088\u0005=\u0000\u0000"+
		"\u0088\b\u0001\u0000\u0000\u0000\u0089\u008a\u0005<\u0000\u0000\u008a"+
		"\n\u0001\u0000\u0000\u0000\u008b\u008c\u0005<\u0000\u0000\u008c\u008d"+
		"\u0005=\u0000\u0000\u008d\f\u0001\u0000\u0000\u0000\u008e\u008f\u0005"+
		"+\u0000\u0000\u008f\u000e\u0001\u0000\u0000\u0000\u0090\u0091\u0005-\u0000"+
		"\u0000\u0091\u0010\u0001\u0000\u0000\u0000\u0092\u0093\u0005*\u0000\u0000"+
		"\u0093\u0012\u0001\u0000\u0000\u0000\u0094\u0095\u0005/\u0000\u0000\u0095"+
		"\u0014\u0001\u0000\u0000\u0000\u0096\u0097\u0005~\u0000\u0000\u0097\u0016"+
		"\u0001\u0000\u0000\u0000\u0098\u0099\u0005n\u0000\u0000\u0099\u009a\u0005"+
		"o\u0000\u0000\u009a\u009b\u0005t\u0000\u0000\u009b\u0018\u0001\u0000\u0000"+
		"\u0000\u009c\u009d\u0005@\u0000\u0000\u009d\u001a\u0001\u0000\u0000\u0000"+
		"\u009e\u009f\u0005;\u0000\u0000\u009f\u001c\u0001\u0000\u0000\u0000\u00a0"+
		"\u00a1\u0005,\u0000\u0000\u00a1\u001e\u0001\u0000\u0000\u0000\u00a2\u00a3"+
		"\u0005:\u0000\u0000\u00a3 \u0001\u0000\u0000\u0000\u00a4\u00a5\u0005."+
		"\u0000\u0000\u00a5\"\u0001\u0000\u0000\u0000\u00a6\u00a7\u0005<\u0000"+
		"\u0000\u00a7\u00a8\u0005-\u0000\u0000\u00a8$\u0001\u0000\u0000\u0000\u00a9"+
		"\u00aa\u0005=\u0000\u0000\u00aa\u00ab\u0005>\u0000\u0000\u00ab&\u0001"+
		"\u0000\u0000\u0000\u00ac\u00ad\u0005(\u0000\u0000\u00ad(\u0001\u0000\u0000"+
		"\u0000\u00ae\u00af\u0005)\u0000\u0000\u00af*\u0001\u0000\u0000\u0000\u00b0"+
		"\u00b1\u0005{\u0000\u0000\u00b1,\u0001\u0000\u0000\u0000\u00b2\u00b3\u0005"+
		"}\u0000\u0000\u00b3.\u0001\u0000\u0000\u0000\u00b4\u00b5\u0005c\u0000"+
		"\u0000\u00b5\u00b6\u0005l\u0000\u0000\u00b6\u00b7\u0005a\u0000\u0000\u00b7"+
		"\u00b8\u0005s\u0000\u0000\u00b8\u00b9\u0005s\u0000\u0000\u00b90\u0001"+
		"\u0000\u0000\u0000\u00ba\u00bb\u0005i\u0000\u0000\u00bb\u00bc\u0005n\u0000"+
		"\u0000\u00bc\u00bd\u0005h\u0000\u0000\u00bd\u00be\u0005e\u0000\u0000\u00be"+
		"\u00bf\u0005r\u0000\u0000\u00bf\u00c0\u0005i\u0000\u0000\u00c0\u00c1\u0005"+
		"t\u0000\u0000\u00c1\u00c2\u0005s\u0000\u0000\u00c22\u0001\u0000\u0000"+
		"\u0000\u00c3\u00c4\u0005w\u0000\u0000\u00c4\u00c5\u0005h\u0000\u0000\u00c5"+
		"\u00c6\u0005i\u0000\u0000\u00c6\u00c7\u0005l\u0000\u0000\u00c7\u00c8\u0005"+
		"e\u0000\u0000\u00c84\u0001\u0000\u0000\u0000\u00c9\u00ca\u0005l\u0000"+
		"\u0000\u00ca\u00cb\u0005o\u0000\u0000\u00cb\u00cc\u0005o\u0000\u0000\u00cc"+
		"\u00cd\u0005p\u0000\u0000\u00cd6\u0001\u0000\u0000\u0000\u00ce\u00cf\u0005"+
		"p\u0000\u0000\u00cf\u00d0\u0005o\u0000\u0000\u00d0\u00d1\u0005o\u0000"+
		"\u0000\u00d1\u00d2\u0005l\u0000\u0000\u00d28\u0001\u0000\u0000\u0000\u00d3"+
		"\u00d4\u0005c\u0000\u0000\u00d4\u00d5\u0005a\u0000\u0000\u00d5\u00d6\u0005"+
		"s\u0000\u0000\u00d6\u00d7\u0005e\u0000\u0000\u00d7:\u0001\u0000\u0000"+
		"\u0000\u00d8\u00d9\u0005e\u0000\u0000\u00d9\u00da\u0005s\u0000\u0000\u00da"+
		"\u00db\u0005a\u0000\u0000\u00db\u00dc\u0005c\u0000\u0000\u00dc<\u0001"+
		"\u0000\u0000\u0000\u00dd\u00de\u0005i\u0000\u0000\u00de\u00df\u0005f\u0000"+
		"\u0000\u00df>\u0001\u0000\u0000\u0000\u00e0\u00e1\u0005t\u0000\u0000\u00e1"+
		"\u00e2\u0005h\u0000\u0000\u00e2\u00e3\u0005e\u0000\u0000\u00e3\u00e4\u0005"+
		"n\u0000\u0000\u00e4@\u0001\u0000\u0000\u0000\u00e5\u00e6\u0005e\u0000"+
		"\u0000\u00e6\u00e7\u0005l\u0000\u0000\u00e7\u00e8\u0005s\u0000\u0000\u00e8"+
		"\u00e9\u0005e\u0000\u0000\u00e9B\u0001\u0000\u0000\u0000\u00ea\u00eb\u0005"+
		"f\u0000\u0000\u00eb\u00ec\u0005i\u0000\u0000\u00ecD\u0001\u0000\u0000"+
		"\u0000\u00ed\u00ee\u0005l\u0000\u0000\u00ee\u00ef\u0005e\u0000\u0000\u00ef"+
		"\u00f0\u0005t\u0000\u0000\u00f0F\u0001\u0000\u0000\u0000\u00f1\u00f2\u0005"+
		"i\u0000\u0000\u00f2\u00f3\u0005n\u0000\u0000\u00f3H\u0001\u0000\u0000"+
		"\u0000\u00f4\u00f5\u0005n\u0000\u0000\u00f5\u00f6\u0005e\u0000\u0000\u00f6"+
		"\u00f7\u0005w\u0000\u0000\u00f7J\u0001\u0000\u0000\u0000\u00f8\u00f9\u0005"+
		"o\u0000\u0000\u00f9\u00fa\u0005f\u0000\u0000\u00faL\u0001\u0000\u0000"+
		"\u0000\u00fb\u00fc\u0005i\u0000\u0000\u00fc\u00fd\u0005s\u0000\u0000\u00fd"+
		"\u00fe\u0005v\u0000\u0000\u00fe\u00ff\u0005o\u0000\u0000\u00ff\u0100\u0005"+
		"i\u0000\u0000\u0100\u0101\u0005d\u0000\u0000\u0101N\u0001\u0000\u0000"+
		"\u0000\u0102\u0103\u0007\u0000\u0000\u0000\u0103P\u0001\u0000\u0000\u0000"+
		"\u0104\u0105\u0007\u0001\u0000\u0000\u0105R\u0001\u0000\u0000\u0000\u0106"+
		"\u0107\u0007\u0002\u0000\u0000\u0107T\u0001\u0000\u0000\u0000\u0108\u0109"+
		"\u0005t\u0000\u0000\u0109\u010a\u0005r\u0000\u0000\u010a\u010b\u0005u"+
		"\u0000\u0000\u010b\u0112\u0005e\u0000\u0000\u010c\u010d\u0005f\u0000\u0000"+
		"\u010d\u010e\u0005a\u0000\u0000\u010e\u010f\u0005l\u0000\u0000\u010f\u0110"+
		"\u0005s\u0000\u0000\u0110\u0112\u0005e\u0000\u0000\u0111\u0108\u0001\u0000"+
		"\u0000\u0000\u0111\u010c\u0001\u0000\u0000\u0000\u0112V\u0001\u0000\u0000"+
		"\u0000\u0113\u0115\u0003O\'\u0000\u0114\u0113\u0001\u0000\u0000\u0000"+
		"\u0115\u0116\u0001\u0000\u0000\u0000\u0116\u0114\u0001\u0000\u0000\u0000"+
		"\u0116\u0117\u0001\u0000\u0000\u0000\u0117X\u0001\u0000\u0000\u0000\u0118"+
		"\u011f\u0003S)\u0000\u0119\u011e\u0003S)\u0000\u011a\u011e\u0003Q(\u0000"+
		"\u011b\u011e\u0005_\u0000\u0000\u011c\u011e\u0003O\'\u0000\u011d\u0119"+
		"\u0001\u0000\u0000\u0000\u011d\u011a\u0001\u0000\u0000\u0000\u011d\u011b"+
		"\u0001\u0000\u0000\u0000\u011d\u011c\u0001\u0000\u0000\u0000\u011e\u0121"+
		"\u0001\u0000\u0000\u0000\u011f\u011d\u0001\u0000\u0000\u0000\u011f\u0120"+
		"\u0001\u0000\u0000\u0000\u0120Z\u0001\u0000\u0000\u0000\u0121\u011f\u0001"+
		"\u0000\u0000\u0000\u0122\u012d\u0005\"\u0000\u0000\u0123\u0124\u0005\\"+
		"\u0000\u0000\u0124\u012c\u0005\"\u0000\u0000\u0125\u0127\u0005\\\u0000"+
		"\u0000\u0126\u0128\u0005\r\u0000\u0000\u0127\u0126\u0001\u0000\u0000\u0000"+
		"\u0127\u0128\u0001\u0000\u0000\u0000\u0128\u0129\u0001\u0000\u0000\u0000"+
		"\u0129\u012c\u0005\n\u0000\u0000\u012a\u012c\t\u0000\u0000\u0000\u012b"+
		"\u0123\u0001\u0000\u0000\u0000\u012b\u0125\u0001\u0000\u0000\u0000\u012b"+
		"\u012a\u0001\u0000\u0000\u0000\u012c\u012f\u0001\u0000\u0000\u0000\u012d"+
		"\u012e\u0001\u0000\u0000\u0000\u012d\u012b\u0001\u0000\u0000\u0000\u012e"+
		"\u0139\u0001\u0000\u0000\u0000\u012f\u012d\u0001\u0000\u0000\u0000\u0130"+
		"\u0131\u0005\"\u0000\u0000\u0131\u013a\u0006-\u0004\u0000\u0132\u0134"+
		"\u0005\r\u0000\u0000\u0133\u0132\u0001\u0000\u0000\u0000\u0133\u0134\u0001"+
		"\u0000\u0000\u0000\u0134\u0135\u0001\u0000\u0000\u0000\u0135\u0136\u0005"+
		"\n\u0000\u0000\u0136\u013a\u0006-\u0005\u0000\u0137\u0138\u0005\u0000"+
		"\u0000\u0001\u0138\u013a\u0006-\u0006\u0000\u0139\u0130\u0001\u0000\u0000"+
		"\u0000\u0139\u0133\u0001\u0000\u0000\u0000\u0139\u0137\u0001\u0000\u0000"+
		"\u0000\u013a\\\u0001\u0000\u0000\u0000\u013b\u013c\u0005I\u0000\u0000"+
		"\u013c\u013d\u0005n\u0000\u0000\u013d\u015c\u0005t\u0000\u0000\u013e\u013f"+
		"\u0005B\u0000\u0000\u013f\u0140\u0005o\u0000\u0000\u0140\u0141\u0005o"+
		"\u0000\u0000\u0141\u015c\u0005l\u0000\u0000\u0142\u0143\u0005S\u0000\u0000"+
		"\u0143\u0144\u0005E\u0000\u0000\u0144\u0145\u0005L\u0000\u0000\u0145\u0146"+
		"\u0005F\u0000\u0000\u0146\u0147\u0005_\u0000\u0000\u0147\u0148\u0005T"+
		"\u0000\u0000\u0148\u0149\u0005Y\u0000\u0000\u0149\u014a\u0005P\u0000\u0000"+
		"\u014a\u015c\u0005E\u0000\u0000\u014b\u014c\u0005S\u0000\u0000\u014c\u014d"+
		"\u0005t\u0000\u0000\u014d\u014e\u0005r\u0000\u0000\u014e\u014f\u0005i"+
		"\u0000\u0000\u014f\u0150\u0005n\u0000\u0000\u0150\u015c\u0005g\u0000\u0000"+
		"\u0151\u0158\u0003Q(\u0000\u0152\u0157\u0003Q(\u0000\u0153\u0157\u0003"+
		"S)\u0000\u0154\u0157\u0003O\'\u0000\u0155\u0157\u0005_\u0000\u0000\u0156"+
		"\u0152\u0001\u0000\u0000\u0000\u0156\u0153\u0001\u0000\u0000\u0000\u0156"+
		"\u0154\u0001\u0000\u0000\u0000\u0156\u0155\u0001\u0000\u0000\u0000\u0157"+
		"\u015a\u0001\u0000\u0000\u0000\u0158\u0156\u0001\u0000\u0000\u0000\u0158"+
		"\u0159\u0001\u0000\u0000\u0000\u0159\u015c\u0001\u0000\u0000\u0000\u015a"+
		"\u0158\u0001\u0000\u0000\u0000\u015b\u013b\u0001\u0000\u0000\u0000\u015b"+
		"\u013e\u0001\u0000\u0000\u0000\u015b\u0142\u0001\u0000\u0000\u0000\u015b"+
		"\u014b\u0001\u0000\u0000\u0000\u015b\u0151\u0001\u0000\u0000\u0000\u015c"+
		"^\u0001\u0000\u0000\u0000\u015d\u015f\u0007\u0003\u0000\u0000\u015e\u015d"+
		"\u0001\u0000\u0000\u0000\u015f\u0160\u0001\u0000\u0000\u0000\u0160\u015e"+
		"\u0001\u0000\u0000\u0000\u0160\u0161\u0001\u0000\u0000\u0000\u0161\u0162"+
		"\u0001\u0000\u0000\u0000\u0162\u0163\u0006/\u0003\u0000\u0163`\u0001\u0000"+
		"\u0000\u0000\u0164\u0165\t\u0000\u0000\u0000\u0165\u0166\u00060\u0007"+
		"\u0000\u0166b\u0001\u0000\u0000\u0000\u0012\u0000hjs\u0080\u0111\u0116"+
		"\u011d\u011f\u0127\u012b\u012d\u0133\u0139\u0156\u0158\u015b\u0160\b\u0001"+
		"\u0000\u0000\u0001\u0000\u0001\u0001\u0001\u0002\u0006\u0000\u0000\u0001"+
		"-\u0003\u0001-\u0004\u0001-\u0005\u00010\u0006";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
